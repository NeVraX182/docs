<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Example Manual</title>
<date>2014-09-09</date>
<author>
<personname>
<firstname>Doc</firstname>
<surname>Writer</surname>
</personname>
<email>doc.writer@example.org</email>
</author>
<authorinitials>DW</authorinitials>
<revhistory>
<revision>
<revnumber>1.0</revnumber>
<date>2014-09-09</date>
<authorinitials>DW</authorinitials>
</revision>
</revhistory>
</info>
<simpara>This is a user manual for an example project.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="images/ex-tree-view-new.png"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<section xml:id="_sequence_diagram">
<title>Sequence diagram</title>
<literallayout class="monospaced">== Initialization ==

Alice -&gt; Bob: Authentication Request
Bob --&gt; Alice: Authentication Response

== Repetition ==

Alice -&gt; Julie: Another authentication Request
Alice &lt;-- Julie: another authentication Response</literallayout>
<simpara>More examples : <link xl:href="http://plantuml.com/sequence-diagram">http://plantuml.com/sequence-diagram</link></simpara>
</section>
<section xml:id="_use_cases_diagram">
<title>Use cases diagram</title>
<literallayout class="monospaced">left to right direction
skinparam packageStyle rectangle
actor customer
actor clerk
rectangle checkout {
  customer -- (checkout)
  (checkout) .&gt; (payment) : include
  (help) .&gt; (checkout) : extends
  (checkout) -- clerk
}</literallayout>
<simpara>More examples : <link xl:href="http://plantuml.com/use-case-diagram">http://plantuml.com/use-case-diagram</link></simpara>
</section>
<section xml:id="_classes_diagram">
<title>Classes diagram</title>
<literallayout class="monospaced">class BaseClass

namespace net.dummy #DDDDDD {
    .BaseClass &lt;|-- Person
    Meeting o-- Person

    .BaseClass &lt;|- Meeting
}

namespace net.foo {
  net.dummy.Person  &lt;|- Person
  .BaseClass &lt;|-- Person

  net.dummy.Meeting o-- Person
}

BaseClass &lt;|-- net.unused.Person</literallayout>
<simpara>More examples : <link xl:href="http://plantuml.com/class-diagram">http://plantuml.com/class-diagram</link></simpara>
</section>
<section xml:id="_activities_diagram">
<title>Activities diagram</title>
<literallayout class="monospaced">start
:ClickServlet.handleRequest();
:new page;
if (Page.onSecurityCheck) then (true)
  :Page.onInit();
  if (isForward?) then (no)
    :Process controls;
    if (continue processing?) then (no)
      stop
    endif

    if (isPost?) then (yes)
      :Page.onPost();
    else (no)
      :Page.onGet();
    endif
    :Page.onRender();
  endif
else (false)
endif

if (do redirect?) then (yes)
  :redirect process;
else
  if (do forward?) then (yes)
    :Forward request;
  else (no)
    :Render page template;
  endif
endif

stop</literallayout>
<simpara>More examples : <link xl:href="http://plantuml.com/activity-diagram-beta">http://plantuml.com/activity-diagram-beta</link></simpara>
</section>
<section xml:id="_components_diagram">
<title>Components diagram</title>
<literallayout class="monospaced">package "Some Group" {
  HTTP - [First Component]
  [Another Component]
}

node "Other Groups" {
  FTP - [Second Component]
  [First Component] --&gt; FTP
}

cloud {
  [Example 1]
}

database "MySql" {
  folder "This is my folder" {
    [Folder 3]
  }
  frame "Foo" {
    [Frame 4]
  }
}

[Another Component] --&gt; [Example 1]
[Example 1] --&gt; [Folder 3]
[Folder 3] --&gt; [Frame 4]</literallayout>
<simpara>More examples : <link xl:href="http://plantuml.com/component-diagram">http://plantuml.com/component-diagram</link></simpara>
</section>
<section xml:id="_states_diagram">
<title>States diagram</title>
<literallayout class="monospaced">scale 600 width

[*] -&gt; State1
State1 --&gt; State2 : Succeeded
State1 --&gt; [*] : Aborted
State2 --&gt; State3 : Succeeded
State2 --&gt; [*] : Aborted
state State3 {
  state "Accumulate Enough Data\nLong State Name" as long1
  long1 : Just a test
  [*] --&gt; long1
  long1 --&gt; long1 : New Data
  long1 --&gt; ProcessData : Enough Data
}
State3 --&gt; State3 : Failed
State3 --&gt; [*] : Succeeded / Save Result
State3 --&gt; [*] : Aborted</literallayout>
<simpara>More examples : <link xl:href="http://plantuml.com/state-diagram">http://plantuml.com/state-diagram</link></simpara>
</section>
<section xml:id="_objects_diagram">
<title>Objects diagram</title>
<literallayout class="monospaced">object Object01
object Object02
object Object03
object Object04
object Object05
object Object06
object Object07
object Object08

Object01 &lt;|-- Object02
Object03 *-- Object04
Object05 o-- "4" Object06
Object07 .. Object08 : some labels</literallayout>
<simpara>More examples : <link xl:href="http://plantuml.com/object-diagram">http://plantuml.com/object-diagram</link></simpara>
</section>
<section xml:id="_user_interface">
<title>User interface</title>
<screen>@startsalt
{+
{* File | Edit | Source | Refactor
 Refactor | New | Open File | - | Close | Close All }
{/ General | Fullscreen | Behavior | Saving }
{
	{ Open image in: | ^Smart Mode^ }
	[X] Smooth images when zoomed
	[X] Confirm image deletion
	[ ] Show hidden images
}
[Close]
}
@endsalt</screen>
<simpara>More examples : <link xl:href="http://plantuml.com/salt">http://plantuml.com/salt</link></simpara>
</section>
<section xml:id="_deployment_diagram">
<title>Deployment diagram</title>
<literallayout class="monospaced">actor actor
agent agent
boundary boundary
cloud cloud
component component
control control
database database
entity entity
file file
folder folder
frame frame
interface  interface
package package
queue queue
artifact artifact
rectangle rectangle
storage storage
usecase usecase
skinparam rectangle {
    roundCorner&lt;&lt;Concept&gt;&gt; 25
}

rectangle "Concept Model" &lt;&lt;Concept&gt;&gt; {
	rectangle "Example 1" &lt;&lt;Concept&gt;&gt; as ex1
	rectangle "Another rectangle"
}
node node1
node node2
node node3
node node4
node node5
node1 -- node2
node1 .. node3
node1 ~~ node4
node1 == node5</literallayout>
</section>
</article>